import openai

openai.key = ""
def create_completion(
    system_msg: str,
    prompt: str,
    token_used: float,
    same_line: bool,
    name_model,
    value_temp,
    request_timeout=180,
    count: int,
    final: int,
):
    header = "\r" * same_line
    progress = f"{header}Prompt sent {count}/{final}, "

    try:
          response = openai.ChatCompletion.create(
              model=name_model,
              temperature=value_temp,
              request_timeout=request_timeout,
              messages=[
                  {
                      "role": "system",
                      "content": system_msg,
                  },
                  {
                      "role": "user",
                      "content": prompt,
                  },
              ],
          )
        raw_response = response.choices[0].message.content
        token_used += response.usage.total_tokens / 1000

        progress = progress + f"total token usage: {token_used: .2f}K"
        if same_line:
            sys.stdout.flush()
            print(progress, end="")
        else:
            print(progress)
            print(f"generated by {response.model}")
        return raw_response, token_used
    except openai.error.RateLimitError as RLE:
        retry_time = RLE.retry_after if hasattr(RLE, "retry_after") else 2
        logger.info(f"Rate limit exceeded. Retrying in {retry_time} seconds...")
        time.sleep(retry_time)
        return create_completion(
            system_msg,
            prompt,
            token_used,
            same_line,
            name_model,
            value_temp,
            request_timeout,
            count,
            final,
        )
    except openai.error.APIConnectionError as ACE:
        retry_time = 2
        logger.info(f"{ACE}, retry in {retry_time} seconds...")
        time.sleep(retry_time)
        return create_completion(
            system_msg,
            prompt,
            token_used,
            same_line,
            name_model,
            value_temp,
            request_timeout,
            count,
            final,
        )
    except openai.error.APIError as APIE:
        retry_time = 2
        logger.info(f"{APIE}, retry in {retry_time} seconds...")
        time.sleep(retry_time)
        return create_completion(
            system_msg,
            prompt,

            token_used,
            same_line,
            name_model,
            value_temp,
            request_timeout,
            count,
            final,
        )
    except openai.error.Timeout as TOE:
        retry_time = 2
        logger.info(f"{TOE}, retry in {retry_time} seconds...")
        time.sleep(retry_time)
        return create_completion(
            system_msg,
            prompt,
            token_used,
            same_line,
            name_model,
            value_temp,
            request_timeout,
            count,
            final,
        )
